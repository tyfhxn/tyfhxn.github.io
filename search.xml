<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>GitHub中30-Days-Of-Python学习记录</title>
      <link href="/2022/01/10/python30day/"/>
      <url>/2022/01/10/python30day/</url>
      
        <content type="html"><![CDATA[<h1 id="GitHub项目地址"><a href="#GitHub项目地址" class="headerlink" title="GitHub项目地址"></a>GitHub项目地址</h1><p><a href="https://github.com/Asabeneh/30-Days-Of-Python">https://github.com/Asabeneh/30-Days-Of-Python</a></p><h2 id="Day1"><a href="#Day1" class="headerlink" title="Day1"></a>Day1</h2><p>介绍python历史及安装操作</p><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><ul><li>单行注释使用 ‘’#’’ 符号</li><li>多行注释：<code>&#39;&#39;&#39; &#39;&#39;&#39;或&quot;&quot;&quot; &quot;&quot;&quot;</code>   使用三个引号(注意：长字符串也可以用三引号来定义)</li></ul><p><img src="https://gitee.com/t_d_l_h/blogimages/raw/master/img/6.png"></p><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><ol><li>数字型(Number)</li></ol><blockquote><p>整数（正，负，零）；0，1，2，-2，-3</p><p>浮点数；1.1，3.4，-3.4，-5.54，0.0</p><p>复数；1+j，2+2j，-3+-2j</p></blockquote><ol start="2"><li>字符串(Strings)</li></ol><p>单引号或双引号下的一个或多个字符的集合，如果不只一个句子则使用三引号</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token string">'abc'</span><span class="token string">"abc"</span><span class="token triple-quoted-string string">"""abv"""</span><span class="token triple-quoted-string string">'''abc'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>布尔值(Booleans)</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token boolean">True</span>：正确<span class="token boolean">False</span>：错误<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="4"><li>列表(list)</li></ol><p>是一个有序集合，允许存储不同的数据类型</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">,</span><span class="token string">'d'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3.2</span><span class="token punctuation">,</span><span class="token number">45.1</span><span class="token punctuation">,</span><span class="token number">5.4</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token boolean">True</span><span class="token punctuation">,</span><span class="token number">9.3</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="5"><li>字典(Dictionary)</li></ol><p>字典对象是键值对格式的无序数据的集合</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token punctuation">&#123;</span>    <span class="token string">'sky'</span><span class="token punctuation">:</span><span class="token string">'blue'</span><span class="token punctuation">,</span>    <span class="token string">'cloudy'</span><span class="token punctuation">:</span><span class="token string">'max'</span><span class="token punctuation">,</span>    <span class="token string">'data'</span><span class="token punctuation">:</span><span class="token number">12</span><span class="token punctuation">,</span>    <span class="token string">'status'</span><span class="token punctuation">:</span><span class="token boolean">True</span><span class="token punctuation">,</span>    <span class="token string">'age'</span><span class="token punctuation">:</span><span class="token number">1.2</span><span class="token punctuation">,</span>    <span class="token string">'name'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'first_name'</span><span class="token punctuation">,</span><span class="token string">'last_name'</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="6"><li>元组(Tuple)</li></ol><p>存储不同数据类型的有序集合，<strong>元组一旦创建不可修改</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="7"><li>集合(Set)</li></ol><p>类似于数学定义上的集合，拥有，唯一性，无序性，确定性</p><p>只能存储不可变数据类型，如整数，浮点数，字符串，元组等，无法存储列表，字典等可变类型</p><p>因为集合是无序的，所以无法使用下标的方式进行索引，只能通过循环的方式进行读取</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'4'</span><span class="token punctuation">&#125;</span>空集合的定义方式：a<span class="token operator">=</span><span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>==数据类型的检测使用python自带的<code>type()</code>函数==</p><h3 id="数据类型强制转换"><a href="#数据类型强制转换" class="headerlink" title="数据类型强制转换"></a>数据类型强制转换</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">float</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="Day2"><a href="#Day2" class="headerlink" title="Day2"></a>Day2</h2><h3 id="内置函数"><a href="#内置函数" class="headerlink" title="内置函数"></a>内置函数</h3><p>内置函数全局可用，无需导入或配置，常用内置函数如下</p><p><img src="https://gitee.com/t_d_l_h/blogimages/raw/master/img/7.png"></p><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><ol><li><p>变量的作用是将数据暂存在内存中</p></li><li><p>变量命名规则</p></li></ol><ul><li>必须以字母或下划线开头</li><li>不能以数字开头</li><li>只能包含字母数字和下划线（A-z、0-9、_）</li><li>变量名区分大小写</li></ul><ol start="3"><li>python标准的命名法是“蛇形命名法”，即多个单词之间用 ’ _ ‘ 分割</li><li>可以在一行中同时声明多个变量</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="Day3"><a href="#Day3" class="headerlink" title="Day3"></a>Day3</h2><h3 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h3><p><img src="https://gitee.com/t_d_l_h/blogimages/raw/master/img/8.png"></p><h3 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h3><p><img src="https://gitee.com/t_d_l_h/blogimages/raw/master/img/9.png"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># Arithmetic Operations in Python</span><span class="token comment"># Integers</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Addition: '</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span>        <span class="token comment"># 3</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Subtraction: '</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>     <span class="token comment"># 1</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Multiplication: '</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">)</span>  <span class="token comment"># 6</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">'Division: '</span><span class="token punctuation">,</span> <span class="token number">4</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span>       <span class="token comment"># 2.0  Division in Python gives floating number</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Division: '</span><span class="token punctuation">,</span> <span class="token number">6</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span>        <span class="token comment"># 3.0         </span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Division: '</span><span class="token punctuation">,</span> <span class="token number">7</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span>        <span class="token comment"># 3.5</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Division without the remainder: '</span><span class="token punctuation">,</span> <span class="token number">7</span> <span class="token operator">//</span> <span class="token number">2</span><span class="token punctuation">)</span>   <span class="token comment"># 3,  gives without the floating number or without the remaining</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">'Division without the remainder: '</span><span class="token punctuation">,</span><span class="token number">7</span> <span class="token operator">//</span> <span class="token number">3</span><span class="token punctuation">)</span>   <span class="token comment"># 2</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Modulus: '</span><span class="token punctuation">,</span> <span class="token number">3</span> <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">)</span>         <span class="token comment"># 1, Gives the remainder</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Exponentiation: '</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token operator">**</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment"># 9 it means 2 * 2 * 2</span><span class="token comment"># Floating numbers</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Floating Point Number, PI'</span><span class="token punctuation">,</span> <span class="token number">3.14</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Floating Point Number, gravity'</span><span class="token punctuation">,</span> <span class="token number">9.81</span><span class="token punctuation">)</span><span class="token comment"># Complex numbers</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Complex number: '</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">1j</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Multiplying complex numbers: '</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token number">1j</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> <span class="token number">1j</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h3><p><img src="https://gitee.com/t_d_l_h/blogimages/raw/master/img/10.png"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">></span> <span class="token number">2</span><span class="token punctuation">)</span>     <span class="token comment"># True, because 3 is greater than 2</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">>=</span> <span class="token number">2</span><span class="token punctuation">)</span>    <span class="token comment"># True, because 3 is greater than 2</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span>     <span class="token comment"># False,  because 3 is greater than 2</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span>     <span class="token comment"># True, because 2 is less than 3</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">&lt;=</span> <span class="token number">3</span><span class="token punctuation">)</span>    <span class="token comment"># True, because 2 is less than 3</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span>    <span class="token comment"># False, because 3 is not equal to 2</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">!=</span> <span class="token number">2</span><span class="token punctuation">)</span>    <span class="token comment"># True, because 3 is not equal to 2</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span><span class="token string">'mango'</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token builtin">len</span><span class="token punctuation">(</span><span class="token string">'avocado'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># False</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span><span class="token string">'mango'</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token builtin">len</span><span class="token punctuation">(</span><span class="token string">'avocado'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># True</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span><span class="token string">'mango'</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span><span class="token string">'avocado'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment"># True</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span><span class="token string">'milk'</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token builtin">len</span><span class="token punctuation">(</span><span class="token string">'meat'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token comment"># False</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span><span class="token string">'milk'</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token builtin">len</span><span class="token punctuation">(</span><span class="token string">'meat'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token comment"># True</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span><span class="token string">'tomato'</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token builtin">len</span><span class="token punctuation">(</span><span class="token string">'potato'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># True</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span><span class="token string">'python'</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token builtin">len</span><span class="token punctuation">(</span><span class="token string">'dragon'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment"># False</span><span class="token comment"># Comparing something gives either a True or False</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'True == True: '</span><span class="token punctuation">,</span> <span class="token boolean">True</span> <span class="token operator">==</span> <span class="token boolean">True</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'True == False: '</span><span class="token punctuation">,</span> <span class="token boolean">True</span> <span class="token operator">==</span> <span class="token boolean">False</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'False == False:'</span><span class="token punctuation">,</span> <span class="token boolean">False</span> <span class="token operator">==</span> <span class="token boolean">False</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>is 如果两个变量是同一个对象，返回true</li><li>is not 如果两个变量不是同一个对象，返回true</li><li>in  如果查询的列表包含某个项目，返回true</li><li>not in 如果查询的列表没有包含某个项目，返回true</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'1 is 1'</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token keyword">is</span> <span class="token number">1</span><span class="token punctuation">)</span>                   <span class="token comment"># True - because the data values are the same</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'1 is not 2'</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token number">2</span><span class="token punctuation">)</span>           <span class="token comment"># True - because 1 is not 2</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'A in Asabeneh'</span><span class="token punctuation">,</span> <span class="token string">'A'</span> <span class="token keyword">in</span> <span class="token string">'Asabeneh'</span><span class="token punctuation">)</span> <span class="token comment"># True - A found in the string</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'B in Asabeneh'</span><span class="token punctuation">,</span> <span class="token string">'B'</span> <span class="token keyword">in</span> <span class="token string">'Asabeneh'</span><span class="token punctuation">)</span> <span class="token comment"># False - there is no uppercase B</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'coding'</span> <span class="token keyword">in</span> <span class="token string">'coding for all'</span><span class="token punctuation">)</span> <span class="token comment"># True - because coding for all has the word coding</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'a in an:'</span><span class="token punctuation">,</span> <span class="token string">'a'</span> <span class="token keyword">in</span> <span class="token string">'an'</span><span class="token punctuation">)</span>      <span class="token comment"># True</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'4 is 2 ** 2:'</span><span class="token punctuation">,</span> <span class="token number">4</span> <span class="token keyword">is</span> <span class="token number">2</span> <span class="token operator">**</span> <span class="token number">2</span><span class="token punctuation">)</span>   <span class="token comment"># True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><p><img src="https://gitee.com/t_d_l_h/blogimages/raw/master/img/11.png"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">></span> <span class="token number">2</span> <span class="token keyword">and</span> <span class="token number">4</span> <span class="token operator">></span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment"># True - because both statements are true</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">></span> <span class="token number">2</span> <span class="token keyword">and</span> <span class="token number">4</span> <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment"># False - because the second statement is false</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">&lt;</span> <span class="token number">2</span> <span class="token keyword">and</span> <span class="token number">4</span> <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment"># False - because both statements are false</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'True and True: '</span><span class="token punctuation">,</span> <span class="token boolean">True</span> <span class="token keyword">and</span> <span class="token boolean">True</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">></span> <span class="token number">2</span> <span class="token keyword">or</span> <span class="token number">4</span> <span class="token operator">></span> <span class="token number">3</span><span class="token punctuation">)</span>  <span class="token comment"># True - because both statements are true</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">></span> <span class="token number">2</span> <span class="token keyword">or</span> <span class="token number">4</span> <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span>  <span class="token comment"># True - because one of the statements is true</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">&lt;</span> <span class="token number">2</span> <span class="token keyword">or</span> <span class="token number">4</span> <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span>  <span class="token comment"># False - because both statements are false</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'True or False:'</span><span class="token punctuation">,</span> <span class="token boolean">True</span> <span class="token keyword">or</span> <span class="token boolean">False</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token keyword">not</span> <span class="token number">3</span> <span class="token operator">></span> <span class="token number">2</span><span class="token punctuation">)</span>     <span class="token comment"># False - because 3 > 2 is true, then not True gives False</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token keyword">not</span> <span class="token boolean">True</span><span class="token punctuation">)</span>      <span class="token comment"># False - Negation, the not operator turns true to false</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token keyword">not</span> <span class="token boolean">False</span><span class="token punctuation">)</span>     <span class="token comment"># True</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token keyword">not</span> <span class="token keyword">not</span> <span class="token boolean">True</span><span class="token punctuation">)</span>  <span class="token comment"># True</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token keyword">not</span> <span class="token keyword">not</span> <span class="token boolean">False</span><span class="token punctuation">)</span> <span class="token comment"># False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java学习</title>
      <link href="/2022/01/09/java-jian-jie/"/>
      <url>/2022/01/09/java-jian-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="一、Java发展史"><a href="#一、Java发展史" class="headerlink" title="一、Java发展史"></a>一、Java发展史</h1><p>开始流行起源于Applet</p><h3 id="1-分类"><a href="#1-分类" class="headerlink" title="1. 分类"></a>1. 分类</h3><ul><li>JavaSE  标准版（桌面程序，控制台开发）</li><li>JavaME 嵌入式开发（手机，小家电） ****</li><li>JavaEE  企业级开发（web端，服务器开发）</li></ul><h3 id="2-三高"><a href="#2-三高" class="headerlink" title="2. 三高"></a>2. 三高</h3><ol><li>高可用</li><li>高性能</li><li>高并发</li></ol><h1 id="二、特性和优势"><a href="#二、特性和优势" class="headerlink" title="二、特性和优势"></a>二、特性和优势</h1><p>可移植性：write once run anywhere</p><p>面向对象</p><p>分布式</p><p>动态性（通过反射）</p><p>多线程</p><h1 id="三、JDK-JRE-JVM"><a href="#三、JDK-JRE-JVM" class="headerlink" title="三、JDK,JRE,JVM"></a>三、JDK,JRE,JVM</h1><p>JDK：Java Development Kit(Java开发者工具)</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2021/12/05/hello-world/"/>
      <url>/2021/12/05/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>bwapp靶场通关（持续更新）</title>
      <link href="/2021/12/05/bwapp-ba-chang-tong-guan-ji-lu/"/>
      <url>/2021/12/05/bwapp-ba-chang-tong-guan-ji-lu/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h2 id="A1-Injection"><a href="#A1-Injection" class="headerlink" title="/ A1 - Injection /"></a>/ A1 - Injection /</h2><h3 id="HTML-Injection-Reflected-GET"><a href="#HTML-Injection-Reflected-GET" class="headerlink" title="HTML Injection - Reflected (GET)"></a>HTML Injection - Reflected (GET)</h3>]]></content>
      
      
      <categories>
          
          <category> 靶场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -bwapp靶场 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker学习</title>
      <link href="/2021/08/10/docker-xue-xi/"/>
      <url>/2021/08/10/docker-xue-xi/</url>
      
        <content type="html"><![CDATA[<h1 id="一、容器与镜像"><a href="#一、容器与镜像" class="headerlink" title="一、容器与镜像"></a>一、容器与镜像</h1><p>容器：包括能够修改镜像的模块和镜像</p><h1 id="二、基本命令："><a href="#二、基本命令：" class="headerlink" title="二、基本命令："></a>二、基本命令：</h1><blockquote><pre class="line-numbers language-dockerfile" data-language="dockerfile"><code class="language-dockerfile">docker container run &lt;容器名字&gt;   创建容器<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-dockerfile" data-language="dockerfile"><code class="language-dockerfile">docker container ls     显示当前存在的容器(运行中)docker container ls -a  显示所有容器(包括停止的)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><table><thead><tr><th>container id</th><th>image</th><th>command</th><th>created</th><th>status</th><th>ports</th><th>names</th></tr></thead><tbody><tr><td>容器对应id，唯一值</td><td>使用的镜像名称</td><td>执行的相关命令</td><td>创建的时间</td><td>当前镜像状态</td><td>协议和端口</td><td>容器名称</td></tr></tbody></table><pre class="line-numbers language-dockerfile" data-language="dockerfile"><code class="language-dockerfile">docker container stop &lt;name or id&gt;    停止容器<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-dockerfile" data-language="dockerfile"><code class="language-dockerfile">docker container rm &lt;name or id&gt;   删除容器<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> 以上命令均可简写</p><pre class="line-numbers language-dockerfile" data-language="dockerfile"><code class="language-dockerfile">docker lsdocker ls -adocker run xxxdocker stop xxxdocker rm xxx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h1 id="三、多容器操作"><a href="#三、多容器操作" class="headerlink" title="三、多容器操作"></a>三、多容器操作</h1><pre class="line-numbers language-dockerfile" data-language="dockerfile"><code class="language-dockerfile">docker container stop $(docker container ps -a -q)  停止运行多个容器<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">docker  rm $(docker ps -a -q)          删除所有容器<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">docker rmi $(docker images -q)        删除所有镜像<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-dockerfile" data-language="dockerfile"><code class="language-dockerfile">docker container rm xxx -f     强制删除正在运行的容器<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="四、两种运行模式"><a href="#四、两种运行模式" class="headerlink" title="四、两种运行模式"></a>四、两种运行模式</h1><ol><li><p>前台运行：在终端显示运行过程和日志，关闭终端服务停止</p></li><li><p>后台运行：加入-d 参数，</p></li><li><p>后台变前台：</p><pre class="line-numbers language-dockerfile" data-language="dockerfile"><code class="language-dockerfile">docker attach xxx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>后台服务模式查看日志</p><pre class="line-numbers language-dockerfile" data-language="dockerfile"><code class="language-dockerfile">docker container logs -f    跟踪日志<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h1 id="五、交互模式"><a href="#五、交互模式" class="headerlink" title="五、交互模式"></a>五、交互模式</h1><pre class="line-numbers language-dockerfile" data-language="dockerfile"><code class="language-dockerfile">docker container run -it xxx sh    -it:交互模式,-sh:使用shell脚本<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这种方法缺点，退出交互模式容器也会停止</p><pre class="line-numbers language-dockerfile" data-language="dockerfile"><code class="language-dockerfile">docker container run -d -p 80:80 xxxdocker exec -it xxx sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>先进入后台模式，在启动交互模式，这样退出交互时容器不会停止</p><h1 id="六、下载镜像"><a href="#六、下载镜像" class="headerlink" title="六、下载镜像"></a>六、下载镜像</h1><p>docker hub</p><p>Dockerfile</p><p>自有文件导入</p><pre class="line-numbers language-dockerfile" data-language="dockerfile"><code class="language-dockerfile">docker image pull xxx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="七、查看详细镜像信息"><a href="#七、查看详细镜像信息" class="headerlink" title="七、查看详细镜像信息"></a>七、查看详细镜像信息</h1><pre class="line-numbers language-dockerfile" data-language="dockerfile"><code class="language-dockerfile">docker image inspect xxx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-dockerfile" data-language="dockerfile"><code class="language-dockerfile">docker image rm  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python生成器中的yield和send理解</title>
      <link href="/2021/05/17/python-sheng-cheng-qi-zhong-de-yield-he-send-li-jie/"/>
      <url>/2021/05/17/python-sheng-cheng-qi-zhong-de-yield-he-send-li-jie/</url>
      
        <content type="html"><![CDATA[<p><strong>《因为在使用Mriai编写机器人脚本，需要学习python生成器的内容，特此记录》</strong></p><blockquote><p>使用了yield关键字的函数称为生成器函数。</p></blockquote><p>yield的作用是在执行到该关键字时，就会返回到调用这个函数语句的位置，继续执行后续代码，直到后续出现类似send的函数，返回到之前yield关键字的位置，将send里面的参数传递到接收yield的变量</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">func1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 生成器函数</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"ok1"</span><span class="token punctuation">)</span>    x <span class="token operator">=</span> <span class="token number">10</span>  <span class="token comment"># 函数内局部变量x赋值为10</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>    x <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token number">1</span>  <span class="token comment"># 这里就是send函数的关键</span>    <span class="token comment"># 之前我们创建的生成器，yield左边都是没有值（我现在不是很确定这里是不是应该叫做返回值，那就先用值代替）。</span>    <span class="token comment"># 现在我们的x会接收到一个值，这个值是什么，从哪里来的？我们继续看下去</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>    <span class="token keyword">yield</span> x  <span class="token comment"># 这里试第二个断点</span>f1 <span class="token operator">=</span> func1<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 获取生成器对象</span>ret1 <span class="token operator">=</span> <span class="token builtin">next</span><span class="token punctuation">(</span>f1<span class="token punctuation">)</span>  <span class="token comment"># 运行到第一个yield</span><span class="token comment"># ret1 = f1.send(None) #（这一句语句需要全部看完回头再看）当第一次执行生成器的时候，他并没有执行到yield这个位置，所以你一点传值，就会出现问题</span><span class="token comment"># 谁去接收？没有对象接收就会报错，所以第一次如果一定要用send去调用，那就传一个None</span><span class="token keyword">print</span><span class="token punctuation">(</span>ret1<span class="token punctuation">)</span>  <span class="token comment"># 打印第一个yield返回的值</span>ret2 <span class="token operator">=</span> f1<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">'eee'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>ret2<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>对exp,poc,payload,shellcode的两个理解</title>
      <link href="/2021/04/19/dui-exp-poc-payload-shellcode-de-liang-ge-li-jie/"/>
      <url>/2021/04/19/dui-exp-poc-payload-shellcode-de-liang-ge-li-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="第一种理解"><a href="#第一种理解" class="headerlink" title="第一种理解"></a>第一种理解</h1><ul><li><h3 id="从总体上理解"><a href="#从总体上理解" class="headerlink" title="从总体上理解"></a>从总体上理解</h3></li></ul><blockquote><p>通过理解答主的回答，以下是我的理解<a href="https://www.zhihu.com/question/39878368?sort=created">https://www.zhihu.com/question/39878368?sort=created</a></p><p>payload：是对漏洞进行攻击行为的代码中执行主要攻击任务的代码部分</p><p>shellcode：验证漏洞存在与否的输入+执行攻击命令的主要代码(payload)</p><p>exp：整个验证加攻击行为的过程</p><p>poc：详细记录攻击的过程和shellcode的代码内容，最后形成的技术文档一样的东西</p></blockquote><h1 id="第二种理解"><a href="#第二种理解" class="headerlink" title="第二种理解"></a>第二种理解</h1><ul><li><h3 id="从小的视角理解"><a href="#从小的视角理解" class="headerlink" title="从小的视角理解"></a>从小的视角理解</h3></li></ul><blockquote><p>payload：在获得目标机器的权限后，进行进一步渗透操作，可以说是内网渗透的范畴</p><p>shellcode：payload中的一种攻击方法，常说正向shell，反向shell等</p><p>poc：验证漏洞是否存在的代码或程序</p><p>exp：对目标机器的漏洞进行攻击，并成功执行攻击代码,并获得目标机器权限</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 名词理解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>命令执行相关学习</title>
      <link href="/2021/03/16/ming-ling-zhi-xing-xiang-guan-zhi-shi-dian/"/>
      <url>/2021/03/16/ming-ling-zhi-xing-xiang-guan-zhi-shi-dian/</url>
      
        <content type="html"><![CDATA[<h1 id="命令执行相关学习"><a href="#命令执行相关学习" class="headerlink" title="命令执行相关学习"></a>命令执行相关学习</h1><p><a href="https://xz.aliyun.com/t/2741">https://xz.aliyun.com/t/2741</a></p><p>命令执行：调用操作系统命令进行执行</p><p>远程代码执行：</p><p>调用服务器网站代码进行执行</p><p>常见的命令执行函数：</p><blockquote><p>system()</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 命令执行 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux学习</title>
      <link href="/2021/03/15/linux-xue-xi/"/>
      <url>/2021/03/15/linux-xue-xi/</url>
      
        <content type="html"><![CDATA[<ol><li><h5 id="使用分号可以输入和执行多条命令"><a href="#使用分号可以输入和执行多条命令" class="headerlink" title="使用分号可以输入和执行多条命令"></a>使用分号可以输入和执行多条命令</h5><p>如   </p><p><img src="https://raw.githubusercontent.com/tyfhxn/blog_images/main/img/20210315223643.png"></p></li><li><h5 id="linux文件名最长可允许255个字符"><a href="#linux文件名最长可允许255个字符" class="headerlink" title="linux文件名最长可允许255个字符"></a>linux文件名最长可允许255个字符</h5></li><li><h5 id="Linux没有拓展名概念"><a href="#Linux没有拓展名概念" class="headerlink" title="Linux没有拓展名概念"></a>Linux没有拓展名概念</h5></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>sql注入使用union select时不回显数字的理解</title>
      <link href="/2021/03/15/sql-zhu-ru-shi-yong-union-select-shi-bu-hui-xian-shu-zi-de-li-jie/"/>
      <url>/2021/03/15/sql-zhu-ru-shi-yong-union-select-shi-bu-hui-xian-shu-zi-de-li-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="当我们使用union-select-1-2-3-4时，经常会出现当前页面并没有发生变化的情况，我用自己的理解来解释一下这个情况"><a href="#当我们使用union-select-1-2-3-4时，经常会出现当前页面并没有发生变化的情况，我用自己的理解来解释一下这个情况" class="headerlink" title="当我们使用union select 1,2,3,4时，经常会出现当前页面并没有发生变化的情况，我用自己的理解来解释一下这个情况"></a>当我们使用union select 1,2,3,4时，经常会出现当前页面并没有发生变化的情况，我用自己的理解来解释一下这个情况</h1><blockquote><h3 id="首先看一下不回显的状况以及解决方法"><a href="#首先看一下不回显的状况以及解决方法" class="headerlink" title="首先看一下不回显的状况以及解决方法"></a>首先看一下不回显的状况以及解决方法</h3><p><img src="https://raw.githubusercontent.com/tyfhxn/blog_images/main/img/20210315155919.png"></p><p><img src="https://raw.githubusercontent.com/tyfhxn/blog_images/main/img/20210315155930.png"></p></blockquote><blockquote><h3 id="再看直接回显的状态"><a href="#再看直接回显的状态" class="headerlink" title="再看直接回显的状态"></a>再看直接回显的状态</h3><p><img src="https://raw.githubusercontent.com/tyfhxn/blog_images/main/img/20210315160009.png"></p></blockquote><p>综合以上我们可以得出，有时候存在回显，但因为当前页面只能显示一部分数据，所以回显的数据被原先存在的数据挡住，无法显示。</p><p>解决方法：让之前的查询语句为错，查不到数据，所以位置就空出来了，这样union select 查询到的数据就可以显示出来了</p>]]></content>
      
      
      <categories>
          
          <category> 漏洞 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sql注入\ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>对文件上传代码片段的猜测理解（php未学）</title>
      <link href="/2021/03/15/dui-wen-jian-shang-chuan-dai-ma-de-li-jie/"/>
      <url>/2021/03/15/dui-wen-jian-shang-chuan-dai-ma-de-li-jie/</url>
      
        <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/tyfhxn/blog_images/main/img/20210315152125.png">对该处的代码我理解为，函数将在temp临时文件内的数据通过函数转移到了新的文件中，传输过程传的是数据，所以最终显示的文件名是目录名而不是新建一个文件</p>]]></content>
      
      
      <categories>
          
          <category> 漏洞 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文件上传 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>各方面小知识点汇总</title>
      <link href="/2021/02/28/xiao-zhi-shi-dian-hui-zong/"/>
      <url>/2021/02/28/xiao-zhi-shi-dian-hui-zong/</url>
      
        <content type="html"><![CDATA[<h1 id="小知识点汇总"><a href="#小知识点汇总" class="headerlink" title="小知识点汇总"></a>小知识点汇总</h1><h3 id="Nginx将404转发至index-php"><a href="#Nginx将404转发至index-php" class="headerlink" title="==Nginx将404转发至index.php=="></a>==Nginx将404转发至index.php==</h3><p><img src="https://raw.githubusercontent.com/tyfhxn/blog_images/main/img/20210315152002.png"></p><p><img src="https://raw.githubusercontent.com/tyfhxn/blog_images/main/img/20210315152011.png"></p><p>第一张图就是进行转发的状态</p><blockquote><p>即在url后面加入任意字符，页面自动跳转至指定页面，不会出现404报错</p></blockquote><p>第二张就是没有进行转发的</p><hr>]]></content>
      
      
      <categories>
          
          <category> 杂项 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sql注入中order by的理解</title>
      <link href="/2021/02/27/sql-zhu-ru-zhong-order-by-de-li-jie/"/>
      <url>/2021/02/27/sql-zhu-ru-zhong-order-by-de-li-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="order-by-的作用是排序"><a href="#order-by-的作用是排序" class="headerlink" title="order by 的作用是排序"></a>order by 的作用是排序</h2><ul><li>order by 默认的是升序， asc 升序 desc 降序</li></ul><blockquote><p>实际演示一下：</p><p><img src="https://raw.githubusercontent.com/tyfhxn/blog_images/main/img/20210315151810.jpg"></p><p>这是一张数据表，接下来使用sql语句进行操作</p></blockquote><blockquote><p>查询表中所有内容：</p><p>SELECT * FROM twe</p><p><img src="https://raw.githubusercontent.com/tyfhxn/blog_images/main/img/20210315151847.jpg"></p><p><strong>可以看到此时的记录排列，接下来使用order by进行排序</strong></p><p><img src="https://raw.githubusercontent.com/tyfhxn/blog_images/main/img/20210315151913.png"></p><p>可以看到查询出来的结果会有差别这个结果就是因为按照不同字段排序所导致的</p><p><img src="https://raw.githubusercontent.com/tyfhxn/blog_images/main/img/20210315151922.png"></p><p>当结果不存在时会返回为空</p></blockquote><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><p>在sql注入时，通过order by判断字段数时，一定要先使前面的查询语句进行闭合，因为order by是对查询结果进行的一个排序，不管结果有没有，一定要使查询能够完整进行后才可以使用order by</p>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sql注入 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
